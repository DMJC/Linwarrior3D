<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classFilesystem" kind="class" language="C++" prot="public">
    <compoundname>Filesystem</compoundname>
    <includes local="no">Filesystem.h</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classFilesystem_1a4e3a0af6769917b22dd8e30522e2974a" prot="private" static="yes" mutable="no">
        <type><ref refid="classFilesystem" kindref="compound">Filesystem</ref> *</type>
        <definition>Filesystem * instance</definition>
        <argsstring></argsstring>
        <name>instance</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/io/Filesystem.h" line="45" column="23" bodyfile="de/hackcraft/io/Filesystem.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classFilesystem_1a93e8049878d0f0924022e20defa52cda" prot="private" static="no" mutable="no">
        <type>std::list&lt; std::string &gt;</type>
        <definition>std::list&lt;std::string&gt; prefixes</definition>
        <argsstring></argsstring>
        <name>prefixes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/io/Filesystem.h" line="48" column="15" bodyfile="de/hackcraft/io/Filesystem.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classFilesystem_1a2c516b3e67eebd5d85aaa2251b1d929d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Filesystem</definition>
        <argsstring>()</argsstring>
        <name>Filesystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/io/Filesystem.h" line="21" column="5" bodyfile="de/hackcraft/io/Filesystem.cpp" bodystart="12" bodyend="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classFilesystem_1ac94ec43bbd20b4497aeb0fe01e093611" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classFilesystem" kindref="compound">Filesystem</ref> *</type>
        <definition>Filesystem * getInstance</definition>
        <argsstring>()</argsstring>
        <name>getInstance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/io/Filesystem.h" line="23" column="23" bodyfile="de/hackcraft/io/Filesystem.cpp" bodystart="31" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classFilesystem_1a42f71a6dabf44b1a3e726938cc9a8b7f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; std::string &gt; *</type>
        <definition>std::list&lt; std::string &gt; * getDirectoryPrefixes</definition>
        <argsstring>()</argsstring>
        <name>getDirectoryPrefixes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/io/Filesystem.h" line="25" column="22" bodyfile="de/hackcraft/io/Filesystem.cpp" bodystart="39" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classFilesystem_1a4ca8582d6df1b924ab53c2474b040641" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * loadTextFile</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>loadTextFile</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Loading whole text file with zero termination. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/io/Filesystem.h" line="28" column="17" bodyfile="de/hackcraft/io/Filesystem.cpp" bodystart="44" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classFilesystem_1aeb2d6f49259dcd6f402d950bc9135315" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * loadBinaryFile</definition>
        <argsstring>(const char *filename, long *filesize)</argsstring>
        <name>loadBinaryFile</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>filesize</declname>
        </param>
        <briefdescription>
<para>Loading whole binary file and deliver loaded file size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/io/Filesystem.h" line="31" column="17" bodyfile="de/hackcraft/io/Filesystem.cpp" bodystart="72" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classFilesystem_1afaf17ec2b2d3b2c67ba8130865a25e7f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE * openReadOnlyTextFile</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>openReadOnlyTextFile</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Try to open text file from any data directory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/io/Filesystem.h" line="34" column="17" bodyfile="de/hackcraft/io/Filesystem.cpp" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classFilesystem_1af72d2cb8754299f881db4bce90250446" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE * openReadOnlyBinaryFile</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>openReadOnlyBinaryFile</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Try to open binary file from any data directory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/io/Filesystem.h" line="36" column="17" bodyfile="de/hackcraft/io/Filesystem.cpp" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classFilesystem_1ab51c18a49b1849d7857a02653c4cd22a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE * openWriteOnlyBinaryFile</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>openWriteOnlyBinaryFile</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Try to open binary file from any data directory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/io/Filesystem.h" line="38" column="17" bodyfile="de/hackcraft/io/Filesystem.cpp" bodystart="117" bodyend="120"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classFilesystem_1a06c7c05c45e5de6988b97e44993008aa" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE * openFile</definition>
        <argsstring>(const char *filename, const char *opentype)</argsstring>
        <name>openFile</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>opentype</declname>
        </param>
        <briefdescription>
<para>Try to open file from any data directory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/io/Filesystem.h" line="42" column="17" bodyfile="de/hackcraft/io/Filesystem.cpp" bodystart="123" bodyend="141"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class that shall provide means to load files from the filesystem. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>list&lt; std::string &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>+elements</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Filesystem</label>
        <link refid="classFilesystem"/>
        <childnode refid="1" relation="usage">
          <edgelabel>-instance</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>-prefixes</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>basic_string&lt; char &gt;</label>
      </node>
    </collaborationgraph>
    <location file="de/hackcraft/io/Filesystem.h" line="19" column="17" bodyfile="de/hackcraft/io/Filesystem.h" bodystart="19" bodyend="49"/>
    <listofallmembers>
      <member refid="classFilesystem_1a2c516b3e67eebd5d85aaa2251b1d929d" prot="public" virt="non-virtual"><scope>Filesystem</scope><name>Filesystem</name></member>
      <member refid="classFilesystem_1a42f71a6dabf44b1a3e726938cc9a8b7f" prot="public" virt="non-virtual"><scope>Filesystem</scope><name>getDirectoryPrefixes</name></member>
      <member refid="classFilesystem_1ac94ec43bbd20b4497aeb0fe01e093611" prot="public" virt="non-virtual"><scope>Filesystem</scope><name>getInstance</name></member>
      <member refid="classFilesystem_1a4e3a0af6769917b22dd8e30522e2974a" prot="private" virt="non-virtual"><scope>Filesystem</scope><name>instance</name></member>
      <member refid="classFilesystem_1aeb2d6f49259dcd6f402d950bc9135315" prot="public" virt="non-virtual"><scope>Filesystem</scope><name>loadBinaryFile</name></member>
      <member refid="classFilesystem_1a4ca8582d6df1b924ab53c2474b040641" prot="public" virt="non-virtual"><scope>Filesystem</scope><name>loadTextFile</name></member>
      <member refid="classFilesystem_1a06c7c05c45e5de6988b97e44993008aa" prot="private" virt="non-virtual"><scope>Filesystem</scope><name>openFile</name></member>
      <member refid="classFilesystem_1af72d2cb8754299f881db4bce90250446" prot="public" virt="non-virtual"><scope>Filesystem</scope><name>openReadOnlyBinaryFile</name></member>
      <member refid="classFilesystem_1afaf17ec2b2d3b2c67ba8130865a25e7f" prot="public" virt="non-virtual"><scope>Filesystem</scope><name>openReadOnlyTextFile</name></member>
      <member refid="classFilesystem_1ab51c18a49b1849d7857a02653c4cd22a" prot="public" virt="non-virtual"><scope>Filesystem</scope><name>openWriteOnlyBinaryFile</name></member>
      <member refid="classFilesystem_1a93e8049878d0f0924022e20defa52cda" prot="private" virt="non-virtual"><scope>Filesystem</scope><name>prefixes</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
