<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classLogger" kind="class" language="C++" prot="public">
    <compoundname>Logger</compoundname>
    <includes local="no">Logger.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classLogger_1af9457fce95e4e6fed058225fd69092e6" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string qualifiedLoggerName</definition>
        <argsstring></argsstring>
        <name>qualifiedLoggerName</name>
        <briefdescription>
<para>Name of logger with full class path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="82" column="17" bodyfile="de/hackcraft/log/Logger.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLogger_1a9f804a77b4afdddbc3d51ab84e31802e" prot="private" static="no" mutable="no">
        <type><ref refid="classLogger" kindref="compound">Logger</ref> *</type>
        <definition>Logger* parentLogger</definition>
        <argsstring></argsstring>
        <name>parentLogger</name>
        <briefdescription>
<para>Future: Parent <ref refid="classLogger" kindref="compound">Logger</ref> may actually be grand grand. </para>
        </briefdescription>
        <detaileddescription>
<para>. parent if there is no in-between. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="85" column="12" bodyfile="de/hackcraft/log/Logger.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLogger_1accf2c03667b5fe874f1a724314189943" prot="private" static="no" mutable="no">
        <type><ref refid="classAppender" kindref="compound">Appender</ref> *</type>
        <definition>Appender* appender</definition>
        <argsstring></argsstring>
        <name>appender</name>
        <briefdescription>
<para><ref refid="classLogger" kindref="compound">Logger</ref> input is forwarded to this appender (if not null) which will output the input. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="88" column="14" bodyfile="de/hackcraft/log/Logger.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLogger_1a59ec3ae7ba728838df10cf987c5a8643" prot="private" static="no" mutable="no">
        <type><ref refid="classLevelStreamLogger" kindref="compound">LevelStreamLogger</ref> *</type>
        <definition>LevelStreamLogger* errorLogger</definition>
        <argsstring></argsstring>
        <name>errorLogger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="93" column="23" bodyfile="de/hackcraft/log/Logger.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLogger_1a61eddba65455535d019346e403a29404" prot="private" static="no" mutable="no">
        <type><ref refid="classLevelStreamLogger" kindref="compound">LevelStreamLogger</ref> *</type>
        <definition>LevelStreamLogger* warnLogger</definition>
        <argsstring></argsstring>
        <name>warnLogger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="94" column="23" bodyfile="de/hackcraft/log/Logger.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLogger_1a425585dc03c24c276b685bcf7bc61dcf" prot="private" static="no" mutable="no">
        <type><ref refid="classLevelStreamLogger" kindref="compound">LevelStreamLogger</ref> *</type>
        <definition>LevelStreamLogger* infoLogger</definition>
        <argsstring></argsstring>
        <name>infoLogger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="95" column="23" bodyfile="de/hackcraft/log/Logger.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLogger_1a9774bc859ce7b36a4b27ecc466a91022" prot="private" static="no" mutable="no">
        <type><ref refid="classLevelStreamLogger" kindref="compound">LevelStreamLogger</ref> *</type>
        <definition>LevelStreamLogger* debugLogger</definition>
        <argsstring></argsstring>
        <name>debugLogger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="96" column="23" bodyfile="de/hackcraft/log/Logger.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLogger_1a5f5ab0cac6afadba859488f553d2e1c2" prot="private" static="no" mutable="no">
        <type><ref refid="classLevelStreamLogger" kindref="compound">LevelStreamLogger</ref> *</type>
        <definition>LevelStreamLogger* traceLogger</definition>
        <argsstring></argsstring>
        <name>traceLogger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="97" column="23" bodyfile="de/hackcraft/log/Logger.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classLogger_1ae37ccb3c46f6afdbba593cf5339eb0b7" prot="private" static="yes" mutable="no">
        <type><ref refid="classAppender" kindref="compound">Appender</ref> *</type>
        <definition>Appender * globalAppender</definition>
        <argsstring></argsstring>
        <name>globalAppender</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="90" column="21" bodyfile="de/hackcraft/log/Logger.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classLogger_1ac11c529e5152e544fbc4c6594add48b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classLogger" kindref="compound">Logger</ref> *</type>
        <definition>Logger * getLogger</definition>
        <argsstring>(const char *qualifiedLoggerName)</argsstring>
        <name>getLogger</name>
        <param>
          <type>const char *</type>
          <declname>qualifiedLoggerName</declname>
        </param>
        <briefdescription>
<para>Get already available logger instance or get and register new instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="40" column="19" bodyfile="de/hackcraft/log/Logger.cpp" bodystart="6" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="classLogger_1a4ae016755006891576ea2c4e3d1566d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * getLevelName</definition>
        <argsstring>(int level)</argsstring>
        <name>getLevelName</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Returns a static readable uppercase label for the level number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="68" column="23" bodyfile="de/hackcraft/log/Logger.cpp" bodystart="90" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classLogger_1aaeb9707751618b06dd0ef355251dfd45" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classAppender" kindref="compound">Appender</ref> *</type>
        <definition>Appender * getGlobalAppender</definition>
        <argsstring>()</argsstring>
        <name>getGlobalAppender</name>
        <briefdescription>
<para>Get the globally used appender object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="71" column="21" bodyfile="de/hackcraft/log/Logger.cpp" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classLogger_1ad74e8ed61a70c7a855608ac95a131ed6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setGlobalAppender</definition>
        <argsstring>(Appender *globalAppender)</argsstring>
        <name>setGlobalAppender</name>
        <param>
          <type><ref refid="classAppender" kindref="compound">Appender</ref> *</type>
          <declname>globalAppender</declname>
        </param>
        <briefdescription>
<para>Set the globally used appender object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="74" column="17" bodyfile="de/hackcraft/log/Logger.cpp" bodystart="108" bodyend="110"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classLogger_1a0d77f27eb95c246d555904aaf08018eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>~Logger</definition>
        <argsstring>()</argsstring>
        <name>~Logger</name>
        <briefdescription>
<para>Tear down logger and free resources. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="43" column="13" bodyfile="de/hackcraft/log/Logger.cpp" bodystart="32" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classLogger_1a5b9ca79151eaac590aec588b2dc97802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classLevelStreamLogger" kindref="compound">LevelStreamLogger</ref> &amp;</type>
        <definition>LevelStreamLogger &amp; error</definition>
        <argsstring>()</argsstring>
        <name>error</name>
        <briefdescription>
<para>Get writable input stream for: error level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="47" column="23" bodyfile="de/hackcraft/log/Logger.cpp" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classLogger_1a2c2148b0f9b136d4d06110d3ca590368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classLevelStreamLogger" kindref="compound">LevelStreamLogger</ref> &amp;</type>
        <definition>LevelStreamLogger &amp; warn</definition>
        <argsstring>()</argsstring>
        <name>warn</name>
        <briefdescription>
<para>Get writable input stream for: warn level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="50" column="23" bodyfile="de/hackcraft/log/Logger.cpp" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classLogger_1a1e95bb12761fc380c41a40ba51c3fb3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classLevelStreamLogger" kindref="compound">LevelStreamLogger</ref> &amp;</type>
        <definition>LevelStreamLogger &amp; info</definition>
        <argsstring>()</argsstring>
        <name>info</name>
        <briefdescription>
<para>Get writable input stream for: info level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="53" column="23" bodyfile="de/hackcraft/log/Logger.cpp" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classLogger_1a2e78e9a7dfd5849dc2b49d3e3dd3d961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classLevelStreamLogger" kindref="compound">LevelStreamLogger</ref> &amp;</type>
        <definition>LevelStreamLogger &amp; debug</definition>
        <argsstring>()</argsstring>
        <name>debug</name>
        <briefdescription>
<para>Get writable input stream for: debug level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="56" column="23" bodyfile="de/hackcraft/log/Logger.cpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classLogger_1a87525b30d4add2922bac0dd2fde8bb55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classLevelStreamLogger" kindref="compound">LevelStreamLogger</ref> &amp;</type>
        <definition>LevelStreamLogger &amp; trace</definition>
        <argsstring>()</argsstring>
        <name>trace</name>
        <briefdescription>
<para>Get writable input stream for: trace level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="59" column="23" bodyfile="de/hackcraft/log/Logger.cpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classLogger_1a9565ec2d7af5dd77481b9164209ce030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void append</definition>
        <argsstring>(LoggerEvent *loggerEvent)</argsstring>
        <name>append</name>
        <param>
          <type><ref refid="classLoggerEvent" kindref="compound">LoggerEvent</ref> *</type>
          <declname>loggerEvent</declname>
        </param>
        <briefdescription>
<para>Called by the level logger to log a submitted log message/event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="62" column="10" bodyfile="de/hackcraft/log/Logger.cpp" bodystart="69" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classLogger_1a1b612f3670f20ad2c7ed3d7a21acc6b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * getName</definition>
        <argsstring>()</argsstring>
        <name>getName</name>
        <briefdescription>
<para>Gets the qualified name of the logger. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="65" column="16" bodyfile="de/hackcraft/log/Logger.cpp" bodystart="85" bodyend="87"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classLogger_1a1b7f56ae8922691b64c83ad1133c1935" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Logger</definition>
        <argsstring>(const char *qualifiedLoggerName)</argsstring>
        <name>Logger</name>
        <param>
          <type>const char *</type>
          <declname>qualifiedLoggerName</declname>
        </param>
        <briefdescription>
<para>Use getLogger instead to get the benefit of shared loggers (future). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/log/Logger.h" line="78" column="5" bodyfile="de/hackcraft/log/Logger.cpp" bodystart="14" bodyend="29"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Use this class to create and use Loggers. </para>
    </briefdescription>
    <detaileddescription>
<para><orderedlist>
<listitem><para>Create a static logger instance:</para>
<para>static Logger* logger; ... logger = <ref refid="classLogger_1ac11c529e5152e544fbc4c6594add48b6" kindref="member">Logger::getLogger</ref>(&quot;de.hackcraft.game.Myclass&quot;);</para>
</listitem><listitem><para>Use to log - Terminate message with backslash n: <linebreak/>
 logger-&gt;<ref refid="classLogger_1a87525b30d4add2922bac0dd2fde8bb55" kindref="member">trace()</ref> lt;lt; &quot;This is trace level message no. &quot; lt;lt; 1 lt;lt; &quot;\n&quot;;</para>
</listitem></orderedlist>
</para>
<para>Note: Hierarchical logging isn&apos;t implemented as for now. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>stringstream</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>LevelStreamLogger</label>
        <link refid="classLevelStreamLogger"/>
        <childnode refid="3" relation="usage">
          <edgelabel>-logstream</edgelabel>
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>-logger</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>basic_istream&lt; Char &gt;</label>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>string</label>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>basic_iostream&lt; Char &gt;</label>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>basic_string&lt; char &gt;</label>
      </node>
      <node id="1">
        <label>Logger</label>
        <link refid="classLogger"/>
        <childnode refid="2" relation="usage">
          <edgelabel>-infoLogger</edgelabel>
          <edgelabel>-traceLogger</edgelabel>
          <edgelabel>-warnLogger</edgelabel>
          <edgelabel>-errorLogger</edgelabel>
          <edgelabel>-debugLogger</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>-globalAppender</edgelabel>
          <edgelabel>-appender</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>-qualifiedLoggerName</edgelabel>
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>-parentLogger</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>Appender</label>
        <link refid="classAppender"/>
      </node>
      <node id="8">
        <label>ios_base</label>
      </node>
      <node id="9">
        <label>basic_ostream&lt; Char &gt;</label>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>basic_ios&lt; Char &gt;</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>basic_stringstream&lt; char &gt;</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="de/hackcraft/log/Logger.h" line="36" column="13" bodyfile="de/hackcraft/log/Logger.h" bodystart="36" bodyend="98"/>
    <listofallmembers>
      <member refid="classLogger_1a9565ec2d7af5dd77481b9164209ce030" prot="public" virt="non-virtual"><scope>Logger</scope><name>append</name></member>
      <member refid="classLogger_1accf2c03667b5fe874f1a724314189943" prot="private" virt="non-virtual"><scope>Logger</scope><name>appender</name></member>
      <member refid="classLogger_1a2e78e9a7dfd5849dc2b49d3e3dd3d961" prot="public" virt="non-virtual"><scope>Logger</scope><name>debug</name></member>
      <member refid="classLogger_1a9774bc859ce7b36a4b27ecc466a91022" prot="private" virt="non-virtual"><scope>Logger</scope><name>debugLogger</name></member>
      <member refid="classLogger_1a5b9ca79151eaac590aec588b2dc97802" prot="public" virt="non-virtual"><scope>Logger</scope><name>error</name></member>
      <member refid="classLogger_1a59ec3ae7ba728838df10cf987c5a8643" prot="private" virt="non-virtual"><scope>Logger</scope><name>errorLogger</name></member>
      <member refid="classLogger_1aaeb9707751618b06dd0ef355251dfd45" prot="public" virt="non-virtual"><scope>Logger</scope><name>getGlobalAppender</name></member>
      <member refid="classLogger_1a4ae016755006891576ea2c4e3d1566d1" prot="public" virt="non-virtual"><scope>Logger</scope><name>getLevelName</name></member>
      <member refid="classLogger_1ac11c529e5152e544fbc4c6594add48b6" prot="public" virt="non-virtual"><scope>Logger</scope><name>getLogger</name></member>
      <member refid="classLogger_1a1b612f3670f20ad2c7ed3d7a21acc6b5" prot="public" virt="non-virtual"><scope>Logger</scope><name>getName</name></member>
      <member refid="classLogger_1ae37ccb3c46f6afdbba593cf5339eb0b7" prot="private" virt="non-virtual"><scope>Logger</scope><name>globalAppender</name></member>
      <member refid="classLogger_1a1e95bb12761fc380c41a40ba51c3fb3a" prot="public" virt="non-virtual"><scope>Logger</scope><name>info</name></member>
      <member refid="classLogger_1a425585dc03c24c276b685bcf7bc61dcf" prot="private" virt="non-virtual"><scope>Logger</scope><name>infoLogger</name></member>
      <member refid="classLogger_1a1b7f56ae8922691b64c83ad1133c1935" prot="private" virt="non-virtual"><scope>Logger</scope><name>Logger</name></member>
      <member refid="classLogger_1a9f804a77b4afdddbc3d51ab84e31802e" prot="private" virt="non-virtual"><scope>Logger</scope><name>parentLogger</name></member>
      <member refid="classLogger_1af9457fce95e4e6fed058225fd69092e6" prot="private" virt="non-virtual"><scope>Logger</scope><name>qualifiedLoggerName</name></member>
      <member refid="classLogger_1ad74e8ed61a70c7a855608ac95a131ed6" prot="public" virt="non-virtual"><scope>Logger</scope><name>setGlobalAppender</name></member>
      <member refid="classLogger_1a87525b30d4add2922bac0dd2fde8bb55" prot="public" virt="non-virtual"><scope>Logger</scope><name>trace</name></member>
      <member refid="classLogger_1a5f5ab0cac6afadba859488f553d2e1c2" prot="private" virt="non-virtual"><scope>Logger</scope><name>traceLogger</name></member>
      <member refid="classLogger_1a2c2148b0f9b136d4d06110d3ca590368" prot="public" virt="non-virtual"><scope>Logger</scope><name>warn</name></member>
      <member refid="classLogger_1a61eddba65455535d019346e403a29404" prot="private" virt="non-virtual"><scope>Logger</scope><name>warnLogger</name></member>
      <member refid="classLogger_1a0d77f27eb95c246d555904aaf08018eb" prot="public" virt="virtual"><scope>Logger</scope><name>~Logger</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
