<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structParticle" kind="struct" language="C++" prot="public">
    <compoundname>Particle</compoundname>
    <derivedcompoundref refid="classrTraceable" prot="public" virt="non-virtual">rTraceable</derivedcompoundref>
    <includes local="no">Particle.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structParticle_1a36cee1dd36b3b7ed9dc597e99a86380a" prot="public" static="no" mutable="no">
        <type><ref refid="math3d_8h_1af5f140c7cfd64fec8b5126ae20ca327f" kindref="member">quat</ref></type>
        <definition>quat ori</definition>
        <argsstring></argsstring>
        <name>ori</name>
        <briefdescription>
<para><ref refid="structParticle" kindref="compound">Particle</ref> orientation quaternion - may use as euler. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="39" column="10" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1aa8a1c0491559faca4ebd0881575ae7f0" prot="public" static="no" mutable="no">
        <type><ref refid="math3d_8h_1aa12dddc6c5b49b59657f5b9262d3196c" kindref="member">vec3</ref></type>
        <definition>vec3 pos</definition>
        <argsstring></argsstring>
        <name>pos</name>
        <briefdescription>
<para><ref refid="structParticle" kindref="compound">Particle</ref> position vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="41" column="10" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1aee8fce7e958bec6c34690e8cbc8bf594" prot="public" static="no" mutable="no">
        <type><ref refid="math3d_8h_1aa12dddc6c5b49b59657f5b9262d3196c" kindref="member">vec3</ref></type>
        <definition>vec3 old</definition>
        <argsstring></argsstring>
        <name>old</name>
        <briefdescription>
<para><ref refid="structParticle" kindref="compound">Particle</ref> old position vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="43" column="10" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1a260bd26276f2c55c6f2e174a66be6e9e" prot="public" static="no" mutable="no">
        <type><ref refid="math3d_8h_1aa12dddc6c5b49b59657f5b9262d3196c" kindref="member">vec3</ref></type>
        <definition>vec3 vel</definition>
        <argsstring></argsstring>
        <name>vel</name>
        <briefdescription>
<para><ref refid="structParticle" kindref="compound">Particle</ref> velocity vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="45" column="10" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1af028545bf91764d2ea961cc8f9671d05" prot="public" static="no" mutable="no">
        <type><ref refid="math3d_8h_1aa12dddc6c5b49b59657f5b9262d3196c" kindref="member">vec3</ref></type>
        <definition>vec3 fce</definition>
        <argsstring></argsstring>
        <name>fce</name>
        <briefdescription>
<para><ref refid="structParticle" kindref="compound">Particle</ref> force accumulation vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="47" column="10" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1a7b2fa2b4300edd7ec1c54209a6a20258" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float mass</definition>
        <argsstring></argsstring>
        <name>mass</name>
        <briefdescription>
<para><ref refid="structParticle" kindref="compound">Particle</ref> mass. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="49" column="11" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1a18db4e1f1a1cf49a9952c0cd25fc864d" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float mass_inv</definition>
        <argsstring></argsstring>
        <name>mass_inv</name>
        <briefdescription>
<para>The inverse of the particle mass is often neccessary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="51" column="11" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1a585bd15db005143bac988d78710e4e93" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float friction</definition>
        <argsstring></argsstring>
        <name>friction</name>
        <briefdescription>
<para>Set when having contact according to contact-depth and material. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="53" column="11" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1a7e90aaa6a3a90affebcf4cb07253c0b9" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float cwm2</definition>
        <argsstring></argsstring>
        <name>cwm2</name>
        <briefdescription>
<para>CW coefficient times area in m2 for calculating air-drag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="55" column="11" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1a0372b06576ffe6b0988b805a10d2c6b6" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float fuel</definition>
        <argsstring></argsstring>
        <name>fuel</name>
        <briefdescription>
<para>Remaining fuel in seconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="57" column="11" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1abb8bd4fceff21f1beaf39e2aba94840a" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float timer</definition>
        <argsstring></argsstring>
        <name>timer</name>
        <briefdescription>
<para>Time since start. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="59" column="11" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1ad397ca26f53de572cc604b21cd15bf26" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float spawn</definition>
        <argsstring></argsstring>
        <name>spawn</name>
        <briefdescription>
<para>Countdown til spawning next Smoke-Particle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="61" column="11" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1a536a6109b1f2660febc058e1627e19e7" prot="public" static="no" mutable="no">
        <type><ref refid="Particle_8h_1af6569be940a6c5566415269eee01de67" kindref="member">OBID</ref></type>
        <definition>OBID target</definition>
        <argsstring></argsstring>
        <name>target</name>
        <briefdescription>
<para>Object-ID of <ref refid="structParticle" kindref="compound">Particle</ref> target - attraction object or evasion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="63" column="10" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1a5050a760c11da521cd4aee6336f6529f" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float radius</definition>
        <argsstring></argsstring>
        <name>radius</name>
        <briefdescription>
<para>Abstract dimension of <ref refid="structParticle" kindref="compound">Particle</ref> by sphere radius. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="65" column="11" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1a96ad167aa2bef32171c3b606551edd2d" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int sound</definition>
        <argsstring></argsstring>
        <name>sound</name>
        <briefdescription>
<para>A sound-source-id just in case this particle emits sound. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="67" column="18" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1a9b08d4c2ab8a02835f60165f65621131" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int texture</definition>
        <argsstring></argsstring>
        <name>texture</name>
        <briefdescription>
<para>A texture-id when a particle has an individual texture. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="69" column="18" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1ac765329451135abec74c45e1897abf26" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
<para>User-type specifier or flags, program defines behavior and shape. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="71" column="9" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1a735984d41155bc1032e09bece8f8d66d" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
<para>Specific user-data - eg billboard text, color curves, object, etc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="73" column="10" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structParticle_1a1dd48c8c96702b4e295701faeff1f862" prot="public" static="no" mutable="no">
        <type>std::list&lt; <ref refid="structParticle" kindref="compound">Particle</ref> * &gt;</type>
        <definition>std::list&lt;Particle*&gt; trail</definition>
        <argsstring></argsstring>
        <name>trail</name>
        <briefdescription>
<para>Recursive sub Particles - or trail of particles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="75" column="15" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structParticle_1aa5fdd1a1b5f8db1e86c854916705e5aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Particle</definition>
        <argsstring>()</argsstring>
        <name>Particle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="77" column="5" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="77" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structParticle_1a76fbe65829606043ef127095b9b81aaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Particle</definition>
        <argsstring>(Particle *original)</argsstring>
        <name>Particle</name>
        <param>
          <type><ref refid="structParticle" kindref="compound">Particle</ref> *</type>
          <declname>original</declname>
        </param>
        <briefdescription>
<para>Copy Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="89" column="5" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="89" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="structParticle_1a74c7d31deb90b8f8f6fded81c8fbaee0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void applyGravityForce</definition>
        <argsstring>(float *gravity_m_per_s)</argsstring>
        <name>applyGravityForce</name>
        <param>
          <type>float *</type>
          <declname>gravity_m_per_s</declname>
        </param>
        <briefdescription>
<para>Apply gravity to the particle&apos;s force, eg with float g[] = {0,-9.8f,0}. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="123" column="17" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="123" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="structParticle_1a6193ae0e472b168246740bed05e9e2ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void applyFrictionForce</definition>
        <argsstring>(float dt)</argsstring>
        <name>applyFrictionForce</name>
        <param>
          <type>float</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
<para>Apply fake friction based on velocity and mass. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="132" column="17" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="132" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structParticle_1ab2dbeff2971baffe51164a34b6658fa4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void applyAirdragForce</definition>
        <argsstring>(float density_kg_per_m3=1.204f)</argsstring>
        <name>applyAirdragForce</name>
        <param>
          <type>float</type>
          <declname>density_kg_per_m3</declname>
          <defval>1.204f</defval>
        </param>
        <briefdescription>
<para>Apply billboard airdrag based on front surface area and cw-value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="140" column="17" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="140" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="structParticle_1a40bb70eec9763cf3603426987ece2289" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float applySpringForce</definition>
        <argsstring>(Particle *other, float strength, float rest_length)</argsstring>
        <name>applySpringForce</name>
        <param>
          <type><ref refid="structParticle" kindref="compound">Particle</ref> *</type>
          <declname>other</declname>
        </param>
        <param>
          <type>float</type>
          <declname>strength</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rest_length</declname>
        </param>
        <briefdescription>
<para>Apply spring force to both particles and return force. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="155" column="18" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="155" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="structParticle_1a5747cc36bde54360e5675040bca22a39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void stepEuler</definition>
        <argsstring>(float dt, float damping=0.01f)</argsstring>
        <name>stepEuler</name>
        <param>
          <type>float</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>float</type>
          <declname>damping</declname>
          <defval>0.01f</defval>
        </param>
        <briefdescription>
<para>Euler integration works by integrating force to velocity and then further into position which is stored in old position beforehand. </para>
        </briefdescription>
        <detaileddescription>
<para>It is fast and not bad but poses problems when the particle position needs to be adjusted due to collisions because current velocity needs to be adjusted, too. It may be ok for elastic particles but for non-elastic particles verlet integration is simpler. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para>the elapsed time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>damping</parametername>
</parameternamelist>
<parameterdescription>
<para>pseudo damping factor within [0,1], typically very small. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="190" column="17" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="structParticle_1a96787a923351b5eb9a7bc3a196b3f92d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void stepVerlet</definition>
        <argsstring>(float dt_inv, float dt2, float damping=0.01f, float velalpha=1.0f)</argsstring>
        <name>stepVerlet</name>
        <param>
          <type>float</type>
          <declname>dt_inv</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dt2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>damping</declname>
          <defval>0.01f</defval>
        </param>
        <param>
          <type>float</type>
          <declname>velalpha</declname>
          <defval>1.0f</defval>
        </param>
        <briefdescription>
<para>Verlet integration derives the new position from the old position the current position and force applied. </para>
        </briefdescription>
        <detaileddescription>
<para>Velocity is thus implicitly used and is derived. Non-elastic collision correction is a snap - just adjust the position. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dt_inv</parametername>
</parameternamelist>
<parameterdescription>
<para>inverse of the elapsed time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt2</parametername>
</parameternamelist>
<parameterdescription>
<para>square of the elapsed time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>damping</parametername>
</parameternamelist>
<parameterdescription>
<para>pseudo damping factor within [0,1], typically very small. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="235" column="17" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="235" bodyend="238"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structParticle_1a1bce2cc3002d6748666fb5c4e8d371b2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void stepEuler</definition>
        <argsstring>(float *pos, float *old, float *vel, float *fce, float mass_inv, float dt, float damping=0.01f)</argsstring>
        <name>stepEuler</name>
        <param>
          <type>float *</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>old</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>fce</declname>
        </param>
        <param>
          <type>float</type>
          <declname>mass_inv</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>float</type>
          <declname>damping</declname>
          <defval>0.01f</defval>
        </param>
        <briefdescription>
<para>Euler integration works by integrating force to velocity and then further into position which is stored in old position beforehand. </para>
        </briefdescription>
        <detaileddescription>
<para>It is fast and not bad but poses problems when the particle position needs to be adjusted due to collisions because current velocity needs to be adjusted, too. It may be ok for elastic particles but for non-elastic particles verlet integration is simpler. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>current and then derived particle position (3fv). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old</parametername>
</parameternamelist>
<parameterdescription>
<para>memory for the next previous particle position (3fv). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vel</parametername>
</parameternamelist>
<parameterdescription>
<para>current particle velocity (3fv). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fce</parametername>
</parameternamelist>
<parameterdescription>
<para>current applied force (3fv). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para>the elapsed time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>damping</parametername>
</parameternamelist>
<parameterdescription>
<para>pseudo damping factor within [0,1], typically very small. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="210" column="24" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="210" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="structParticle_1af757c825365a4bcef712b7831fdc03b3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void stepVerlet</definition>
        <argsstring>(float *pos, float *old, float *vel, float *fce, float mass_inv, float dt_inv, float dt2, float damping=0.01f, float velalpha=1.0f)</argsstring>
        <name>stepVerlet</name>
        <param>
          <type>float *</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>old</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>fce</declname>
        </param>
        <param>
          <type>float</type>
          <declname>mass_inv</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dt_inv</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dt2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>damping</declname>
          <defval>0.01f</defval>
        </param>
        <param>
          <type>float</type>
          <declname>velalpha</declname>
          <defval>1.0f</defval>
        </param>
        <briefdescription>
<para>Verlet integration derives the new position from the old position the current position and force applied. </para>
        </briefdescription>
        <detaileddescription>
<para>Velocity is thus implicitly used and is derived. Non-elastic collision correction is a snap - just adjust the position. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>current particle position (3fv). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old</parametername>
</parameternamelist>
<parameterdescription>
<para>previous particle position (3fv). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vel</parametername>
</parameternamelist>
<parameterdescription>
<para>memory for derived velocity (3fv). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fce</parametername>
</parameternamelist>
<parameterdescription>
<para>current applied force (3fv). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt_inv</parametername>
</parameternamelist>
<parameterdescription>
<para>inverse of the elapsed time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt2</parametername>
</parameternamelist>
<parameterdescription>
<para>square of the elapsed time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>damping</parametername>
</parameternamelist>
<parameterdescription>
<para>pseudo damping factor within [0,1], typically very small. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="253" column="24" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="253" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="structParticle_1a2ec0be9e7b0939d8ee4636a0e72c68ed" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>static float constrainParticleByStick</definition>
        <argsstring>(float *particle3fv, float *center3fv, float radius, float *projection3fv, float adjustment=1.0f, float *centerprojection3fv=NULL)</argsstring>
        <name>constrainParticleByStick</name>
        <param>
          <type>float *</type>
          <declname>particle3fv</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>center3fv</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>projection3fv</declname>
        </param>
        <param>
          <type>float</type>
          <declname>adjustment</declname>
          <defval>1.0f</defval>
        </param>
        <param>
          <type>float *</type>
          <declname>centerprojection3fv</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="281" column="25" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="281" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="structParticle_1aeff870d55846e433a88234aa1e233d9e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>static float constraintParticleBySphere</definition>
        <argsstring>(float *particle3fv, float *center3fv, float radius, float *projection3fv)</argsstring>
        <name>constraintParticleBySphere</name>
        <param>
          <type>float *</type>
          <declname>particle3fv</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>center3fv</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>projection3fv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="307" column="25" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="307" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="structParticle_1abe8c8978fdbb9ca17445861eb4b040d3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>static float constraintParticleByCone</definition>
        <argsstring>(float *particle3fv, float *base3fv, float radius, float height, float *projection3fv)</argsstring>
        <name>constraintParticleByCone</name>
        <param>
          <type>float *</type>
          <declname>particle3fv</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>base3fv</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>projection3fv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="330" column="25" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="330" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="structParticle_1a97bb72698b8c0506d6ed28ab4448752a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>static float constraintParticleByCylinder</definition>
        <argsstring>(float *particle3fv, float *base3fv, float radius, float height, float *projection3fv)</argsstring>
        <name>constraintParticleByCylinder</name>
        <param>
          <type>float *</type>
          <declname>particle3fv</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>base3fv</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>projection3fv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="387" column="25" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="387" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="structParticle_1a65478be56b99026833d63e139e34284c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>static float constraintParticleByBox</definition>
        <argsstring>(float *particle3fv, float *min3fv, float *max3fv, float *projection3fv)</argsstring>
        <name>constraintParticleByBox</name>
        <param>
          <type>float *</type>
          <declname>particle3fv</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>min3fv</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>max3fv</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>projection3fv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="430" column="25" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="430" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="structParticle_1a2db01f2eb713b1351b18fe69a70fd4dd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void rotationTo</definition>
        <argsstring>(float *result2f, float *own_pos, float *tgt_pos, float *base_ori, float *tower_ori=NULL)</argsstring>
        <name>rotationTo</name>
        <param>
          <type>float *</type>
          <declname>result2f</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>own_pos</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>tgt_pos</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>base_ori</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>tower_ori</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Utility function to compute nearest rotation direction and intensity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="464" column="17" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="464" bodyend="477"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structParticle_1af189695f77e47140957a1dcaedfbf20b" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>static float sqrt_</definition>
        <argsstring>(float value)</argsstring>
        <name>sqrt_</name>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="de/hackcraft/psi3d/Particle.h" line="481" column="25" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="481" bodyend="494"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="structParticle" kindref="compound">Particle</ref> can be anything from bullets over flares to smoke. </para>
    </briefdescription>
    <detaileddescription>
<para>It has a position and a velocity. Besides it has a lifetime countdown (fuel), a time in existence timer and a spawn countdown which is for spawning particle offspring. A particle can have a trail consisting of other particles like smoke or other recursive systems (in this context I hereby coin the term Particle-Tree ;). Note: There are ways to produces trees (plants) using particle systems but that&apos;s another story. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Particle</label>
        <link refid="structParticle"/>
      </node>
      <node id="2">
        <label>rTraceable</label>
        <link refid="classrTraceable"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>list&lt; Particle * &gt;</label>
        <childnode refid="1" relation="usage">
          <edgelabel>+elements</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Particle</label>
        <link refid="structParticle"/>
        <childnode refid="2" relation="usage">
          <edgelabel>+trail</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="de/hackcraft/psi3d/Particle.h" line="37" column="15" bodyfile="de/hackcraft/psi3d/Particle.h" bodystart="37" bodyend="495"/>
    <listofallmembers>
      <member refid="structParticle_1ab2dbeff2971baffe51164a34b6658fa4" prot="public" virt="non-virtual"><scope>Particle</scope><name>applyAirdragForce</name></member>
      <member refid="structParticle_1a6193ae0e472b168246740bed05e9e2ab" prot="public" virt="non-virtual"><scope>Particle</scope><name>applyFrictionForce</name></member>
      <member refid="structParticle_1a74c7d31deb90b8f8f6fded81c8fbaee0" prot="public" virt="non-virtual"><scope>Particle</scope><name>applyGravityForce</name></member>
      <member refid="structParticle_1a40bb70eec9763cf3603426987ece2289" prot="public" virt="non-virtual"><scope>Particle</scope><name>applySpringForce</name></member>
      <member refid="structParticle_1a2ec0be9e7b0939d8ee4636a0e72c68ed" prot="public" virt="non-virtual"><scope>Particle</scope><name>constrainParticleByStick</name></member>
      <member refid="structParticle_1a65478be56b99026833d63e139e34284c" prot="public" virt="non-virtual"><scope>Particle</scope><name>constraintParticleByBox</name></member>
      <member refid="structParticle_1abe8c8978fdbb9ca17445861eb4b040d3" prot="public" virt="non-virtual"><scope>Particle</scope><name>constraintParticleByCone</name></member>
      <member refid="structParticle_1a97bb72698b8c0506d6ed28ab4448752a" prot="public" virt="non-virtual"><scope>Particle</scope><name>constraintParticleByCylinder</name></member>
      <member refid="structParticle_1aeff870d55846e433a88234aa1e233d9e" prot="public" virt="non-virtual"><scope>Particle</scope><name>constraintParticleBySphere</name></member>
      <member refid="structParticle_1a7e90aaa6a3a90affebcf4cb07253c0b9" prot="public" virt="non-virtual"><scope>Particle</scope><name>cwm2</name></member>
      <member refid="structParticle_1a735984d41155bc1032e09bece8f8d66d" prot="public" virt="non-virtual"><scope>Particle</scope><name>data</name></member>
      <member refid="structParticle_1af028545bf91764d2ea961cc8f9671d05" prot="public" virt="non-virtual"><scope>Particle</scope><name>fce</name></member>
      <member refid="structParticle_1a585bd15db005143bac988d78710e4e93" prot="public" virt="non-virtual"><scope>Particle</scope><name>friction</name></member>
      <member refid="structParticle_1a0372b06576ffe6b0988b805a10d2c6b6" prot="public" virt="non-virtual"><scope>Particle</scope><name>fuel</name></member>
      <member refid="structParticle_1a7b2fa2b4300edd7ec1c54209a6a20258" prot="public" virt="non-virtual"><scope>Particle</scope><name>mass</name></member>
      <member refid="structParticle_1a18db4e1f1a1cf49a9952c0cd25fc864d" prot="public" virt="non-virtual"><scope>Particle</scope><name>mass_inv</name></member>
      <member refid="structParticle_1aee8fce7e958bec6c34690e8cbc8bf594" prot="public" virt="non-virtual"><scope>Particle</scope><name>old</name></member>
      <member refid="structParticle_1a36cee1dd36b3b7ed9dc597e99a86380a" prot="public" virt="non-virtual"><scope>Particle</scope><name>ori</name></member>
      <member refid="structParticle_1aa5fdd1a1b5f8db1e86c854916705e5aa" prot="public" virt="non-virtual"><scope>Particle</scope><name>Particle</name></member>
      <member refid="structParticle_1a76fbe65829606043ef127095b9b81aaa" prot="public" virt="non-virtual"><scope>Particle</scope><name>Particle</name></member>
      <member refid="structParticle_1aa8a1c0491559faca4ebd0881575ae7f0" prot="public" virt="non-virtual"><scope>Particle</scope><name>pos</name></member>
      <member refid="structParticle_1a5050a760c11da521cd4aee6336f6529f" prot="public" virt="non-virtual"><scope>Particle</scope><name>radius</name></member>
      <member refid="structParticle_1a2db01f2eb713b1351b18fe69a70fd4dd" prot="public" virt="non-virtual"><scope>Particle</scope><name>rotationTo</name></member>
      <member refid="structParticle_1a96ad167aa2bef32171c3b606551edd2d" prot="public" virt="non-virtual"><scope>Particle</scope><name>sound</name></member>
      <member refid="structParticle_1ad397ca26f53de572cc604b21cd15bf26" prot="public" virt="non-virtual"><scope>Particle</scope><name>spawn</name></member>
      <member refid="structParticle_1af189695f77e47140957a1dcaedfbf20b" prot="private" virt="non-virtual"><scope>Particle</scope><name>sqrt_</name></member>
      <member refid="structParticle_1a5747cc36bde54360e5675040bca22a39" prot="public" virt="non-virtual"><scope>Particle</scope><name>stepEuler</name></member>
      <member refid="structParticle_1a1bce2cc3002d6748666fb5c4e8d371b2" prot="public" virt="non-virtual"><scope>Particle</scope><name>stepEuler</name></member>
      <member refid="structParticle_1a96787a923351b5eb9a7bc3a196b3f92d" prot="public" virt="non-virtual"><scope>Particle</scope><name>stepVerlet</name></member>
      <member refid="structParticle_1af757c825365a4bcef712b7831fdc03b3" prot="public" virt="non-virtual"><scope>Particle</scope><name>stepVerlet</name></member>
      <member refid="structParticle_1a536a6109b1f2660febc058e1627e19e7" prot="public" virt="non-virtual"><scope>Particle</scope><name>target</name></member>
      <member refid="structParticle_1a9b08d4c2ab8a02835f60165f65621131" prot="public" virt="non-virtual"><scope>Particle</scope><name>texture</name></member>
      <member refid="structParticle_1abb8bd4fceff21f1beaf39e2aba94840a" prot="public" virt="non-virtual"><scope>Particle</scope><name>timer</name></member>
      <member refid="structParticle_1a1dd48c8c96702b4e295701faeff1f862" prot="public" virt="non-virtual"><scope>Particle</scope><name>trail</name></member>
      <member refid="structParticle_1ac765329451135abec74c45e1897abf26" prot="public" virt="non-virtual"><scope>Particle</scope><name>type</name></member>
      <member refid="structParticle_1a260bd26276f2c55c6f2e174a66be6e9e" prot="public" virt="non-virtual"><scope>Particle</scope><name>vel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
